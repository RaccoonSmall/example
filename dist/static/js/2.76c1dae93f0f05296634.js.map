{"version":3,"sources":["webpack:///./src/page/view-6/index.vue","webpack:///./src/page/view-6/index.vue?600b","webpack:///src/page/view-6/index.vue"],"names":["__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4eaa74aa_hasScoped_true_transformToRequire_video_src_poster_source_src_img_src_image_xlink_href_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_index_vue__","__webpack_require__","__vue_styles__","ssrContext","Component","normalizeComponent","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_index_vue___default","a","__webpack_exports__","esExports","render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","_m","on","click","$event","storeCommit","commit_","staticRenderFns","_mutation","methods","alert","$store","state","status","console","log","commit"],"mappings":"oOAAA,IAAAA,EAAAC,EAAA,QAGA,IASAC,EAZA,SAAAC,GACAF,EAAA,SAgBAG,EAdAH,EAAA,OAcAI,CACAC,EAAAC,EACAP,EAAA,GATA,EAWAE,EAPA,kBAEA,MAUAM,EAAA,QAAAJ,EAAA,2CC1BA,IAEAK,GAAiBC,OAFjB,WAA0B,IAAAC,EAAAC,KAAaC,EAAAF,EAAAG,eAA0BC,EAAAJ,EAAAK,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,QAAAA,EAAA,KAA0BE,YAAA,yBAAmCN,EAAAO,GAAA,oBAAAP,EAAAO,GAAA,KAAAP,EAAAQ,GAAA,GAAAR,EAAAO,GAAA,KAAAH,EAAA,OAAyEE,YAAA,qBAA+BN,EAAAO,GAAA,sIAAAP,EAAAO,GAAA,KAAAH,EAAA,KAAmKE,YAAA,cAAwBN,EAAAO,GAAA,kGAAAP,EAAAO,GAAA,KAAAP,EAAAQ,GAAA,GAAAR,EAAAO,GAAA,KAAAH,EAAA,KAAqJE,YAAA,QAAAG,IAAwBC,MAAA,SAAAC,GAAyBX,EAAAY,kBAAoBZ,EAAAO,GAAA,yDAA6DP,EAAAO,GAAA,KAAAH,EAAA,OAAAA,EAAA,KAAmCE,YAAA,cAAwBN,EAAAO,GAAA,yBAAAP,EAAAO,GAAA,KAAAH,EAAA,OAAwDE,YAAA,qBAA+BN,EAAAO,GAAA,iFAAAP,EAAAO,GAAA,KAAAP,EAAAQ,GAAA,GAAAR,EAAAO,GAAA,KAAAH,EAAA,KAAoIE,YAAA,QAAAG,IAAwBC,MAAA,SAAAC,GAAyBX,EAAAa,cAAgBb,EAAAO,GAAA,iEAEthCO,iBADjB,WAAoC,IAAaZ,EAAbD,KAAaE,eAA0BC,EAAvCH,KAAuCI,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAiBE,YAAA,qBAAhFL,KAA+GM,GAAA,oEAAAH,EAAA,MAA/GH,KAA+GM,GAAA,gLAA4Q,WAAc,IAAaL,EAAbD,KAAaE,eAA0BC,EAAvCH,KAAuCI,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAA/DH,KAA+DM,GAAA,oKAAqIH,EAAA,QAAkEE,YAAA,YAAtQL,KAA4RM,GAAA,4CAA5RN,KAA4RM,GAAA,kBAAAH,EAAA,QAAyFE,YAAA,YAArXL,KAA2YM,GAAA,wEAA3YN,KAA2YM,GAAA,kBAAAH,EAAA,QAA3YH,KAA2YM,GAAA,wWAA3YN,KAA41BM,GAAA,iBAA0C,WAAc,IAAaL,EAAbD,KAAaE,eAA0BC,EAAvCH,KAAuCI,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAA/DH,KAA+DM,GAAA,qCAAAH,EAAA,QAA/DH,KAA+DM,GAAA,wnBAA/DN,KAAmvBM,GAAA,uBAEpjEV,EAAA,wFC8DA,MAAAkB,EAAAzB,EAAA,uCAEA0B,SACAJ,YADA,WAEAK,MAAA,sBAAAhB,KAAAiB,OAAAC,MAAAC,QACAC,QAAAC,IAAA,sBAAArB,KAAAiB,OAAAC,MAAAC,QAEAnB,KAAAiB,OAAAK,OAAA,aAEAF,QAAAC,IAAA,sBAAArB,KAAAiB,OAAAC,MAAAC,QACAH,MAAA,sBAAAhB,KAAAiB,OAAAC,MAAAC,SAEAP,QAVA,WAWAI,MAAA,sBAAAhB,KAAAiB,OAAAC,MAAAC,QACAC,QAAAC,IAAA,sBAAArB,KAAAiB,OAAAC,MAAAC,QAEAnB,KAAAiB,OAAAK,OAAA,OAEAF,QAAAC,IAAA,sBAAArB,KAAAiB,OAAAC,MAAAC,QACAH,MAAA,sBAAAhB,KAAAiB,OAAAC,MAAAC","file":"static/js/2.76c1dae93f0f05296634.js","sourcesContent":["function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-4eaa74aa\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./index.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4eaa74aa\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-4eaa74aa\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/page/view-6/index.vue\n// module id = SJYT\n// module chunks = 2","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('main',[_c('p',{staticClass:\"title-tip margin-t-0\"},[_vm._v(\"使用进阶--mutation\")]),_vm._v(\" \"),_vm._m(0),_vm._v(\" \"),_c('div',{staticClass:\"x-font-container\"},[_vm._v(\"上面收说到vuex 的状态管理，当我们要对状态进行更改的时候该如何做呢？ 这时就用到了Store mutation了~ 在Vuex中唯一能改变Store state 的就是显式的提交，调用commit()方法。Vuex 给她定了个名字叫做Mutation~\")]),_vm._v(\" \"),_c('p',{staticClass:\"color-red\"},[_vm._v(\"Vuex Store 状态也是响应式了，因此当我们Commit 提交对Store State 状态的值更改，组件之间的住状态也会随之改变，也正是体现了Vue 技术体系中的高效和便捷了~\")]),_vm._v(\" \"),_vm._m(1),_vm._v(\" \"),_c('p',{staticClass:\"x-btn\",on:{\"click\":function($event){_vm.storeCommit()}}},[_vm._v(\"修改Store State 状态值：this.$store.commmit('setStatus');\")]),_vm._v(\" \"),_c('div',[_c('p',{staticClass:\"title-tip\"},[_vm._v(\"使用常量代替Mutation 事件类型\")]),_vm._v(\" \"),_c('div',{staticClass:\"x-font-container\"},[_vm._v(\"对于较大或者应用状态管理应用较多程序应用，使用常用代替事件类型，对于代码结构上会更加清晰，一目了然。相信谁都愿意去写代码结构清晰，代码质量精简的代码~\")]),_vm._v(\" \"),_vm._m(2),_vm._v(\" \"),_c('p',{staticClass:\"x-btn\",on:{\"click\":function($event){_vm.commit_()}}},[_vm._v(\"全局常量触发mutations事件类型：this.$store.commmit(mutation.APP);\")])])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"x-font-container\"},[_vm._v(\"一个重要的概念，mutation。 Vuex 主要功能是提供应用程序之间的状态管理，如何进行状态呢？\\n            \"),_c('br'),_vm._v(\"  知道vue是以数据驱动视图，而我们Vuex 就是需要定义具有语义化的数据来管理我们应用组件之间的状态，这个具有语义化的数据我们定义在Store state中，既State 称呼抽象可以理解为状态管理。当我们需要为一些组件做一个不同逻辑操作时，就需要用到state了，根据state 里面的数据做一些实际逻辑的处理~\\n        \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('pre',[_vm._v(\"            定义一个mutation,在Store 中定义mutations对象。\\n            改变state 中的状态值：this.$store.commit('setAddress');\\n            Store mutations 中接收X个参数：\\n            \"),_c('span',{staticClass:\"x-color\"},[_vm._v(\"1、接收 state 作为第一个参数，可访问stotre state 状态值\")]),_vm._v(\"\\n            \"),_c('span',{staticClass:\"x-color\"},[_vm._v(\"2、mutation 接收可以接收第二个附件参数data，commit('mutations funtionName',data).\")]),_vm._v(\"\\n            \"),_c('code',[_vm._v(\"\\n                const store = new vuex.Store({\\n                    state:{\\n                        status:'0',\\n                    },\\n                    mutations:{\\n                        setStatus(state,data) {\\n                            state.status = '1';\\n                        }\\n                    }\\n                });\\n            \")]),_vm._v(\"\\n        \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('pre',[_vm._v(\"                使用：\\n            \"),_c('code',[_vm._v(\"\\n                mutation.js:\\n                const APP = '0';\\n                export default {\\n                    APP,\\n                }\\n\\n                \\n                import mutation from '@/store/mutation'\\n                const store = new vuex.Store({\\n                    state:{\\n                        status:'0',\\n                    },\\n                    mutations:{\\n                        //使用常量代替Mutation 事件类型\\n                        [mutation.APP](state,data) {\\n                            state.status = '1';\\n                        }\\n                    }\\n                });\\n            \")]),_vm._v(\"\\n            \")])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-4eaa74aa\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/page/view-6/index.vue\n// module id = osh6\n// module chunks = 2","<template>\r\n    <main>\r\n        <p class=\"title-tip margin-t-0\">使用进阶--mutation</p>\r\n            <div class=\"x-font-container\">一个重要的概念，mutation。 Vuex 主要功能是提供应用程序之间的状态管理，如何进行状态呢？\r\n                <br/>&emsp;&emsp;知道vue是以数据驱动视图，而我们Vuex 就是需要定义具有语义化的数据来管理我们应用组件之间的状态，这个具有语义化的数据我们定义在Store state中，既State 称呼抽象可以理解为状态管理。当我们需要为一些组件做一个不同逻辑操作时，就需要用到state了，根据state 里面的数据做一些实际逻辑的处理~\r\n            </div>\r\n            <div class=\"x-font-container\">上面收说到vuex 的状态管理，当我们要对状态进行更改的时候该如何做呢？ 这时就用到了Store mutation了~ 在Vuex中唯一能改变Store state 的就是显式的提交，调用commit()方法。Vuex 给她定了个名字叫做Mutation~</div>\r\n\r\n            <p class=\"color-red\">Vuex Store 状态也是响应式了，因此当我们Commit 提交对Store State 状态的值更改，组件之间的住状态也会随之改变，也正是体现了Vue 技术体系中的高效和便捷了~</p>\r\n\r\n            <pre>\r\n                定义一个mutation,在Store 中定义mutations对象。\r\n                改变state 中的状态值：this.$store.commit('setAddress');\r\n                Store mutations 中接收X个参数：\r\n                <span class=\"x-color\">1、接收 state 作为第一个参数，可访问stotre state 状态值</span>\r\n                <span class=\"x-color\">2、mutation 接收可以接收第二个附件参数data，commit('mutations funtionName',data).</span>\r\n                <code>\r\n                    const store = new vuex.Store({\r\n                        state:{\r\n                            status:'0',\r\n                        },\r\n                        mutations:{\r\n                            setStatus(state,data) {\r\n                                state.status = '1';\r\n                            }\r\n                        }\r\n                    });\r\n                </code>\r\n            </pre>\r\n\r\n            <p class=\"x-btn\" @click=\"storeCommit()\">修改Store State 状态值：this.$store.commmit('setStatus');</p>\r\n\r\n\r\n            <div>\r\n                <p class=\"title-tip\">使用常量代替Mutation 事件类型</p>\r\n                <div class=\"x-font-container\">对于较大或者应用状态管理应用较多程序应用，使用常用代替事件类型，对于代码结构上会更加清晰，一目了然。相信谁都愿意去写代码结构清晰，代码质量精简的代码~</div>\r\n                <pre>\r\n                    使用：\r\n                <code>\r\n                    mutation.js:\r\n                    const APP = '0';\r\n                    export default {\r\n                        APP,\r\n                    }\r\n\r\n                    \r\n                    import mutation from '@/store/mutation'\r\n                    const store = new vuex.Store({\r\n                        state:{\r\n                            status:'0',\r\n                        },\r\n                        mutations:{\r\n                            //使用常量代替Mutation 事件类型\r\n                            [mutation.APP](state,data) {\r\n                                state.status = '1';\r\n                            }\r\n                        }\r\n                    });\r\n                </code>\r\n                </pre>\r\n                <p class=\"x-btn\" @click=\"commit_()\">全局常量触发mutations事件类型：this.$store.commmit(mutation.APP);</p>\r\n            </div>\r\n    </main>\r\n</template>\r\n<script>\r\nimport mutation from '@/store/mutation'\r\nexport default {\r\n    methods:{\r\n        storeCommit() {\r\n            alert('修改前state status---:' + this.$store.state.status);\r\n            console.log('修改前state status---:' + this.$store.state.status);\r\n\r\n            this.$store.commit('setStatus');\r\n\r\n            console.log('修改后state status---:' + this.$store.state.status);\r\n            alert('修改后state status---:' + this.$store.state.status);\r\n        },\r\n        commit_() {\r\n            alert('修改前state status---:' + this.$store.state.status);\r\n            console.log('修改前state status---:' + this.$store.state.status);\r\n\r\n            this.$store.commit('app');\r\n\r\n            console.log('修改后state status---:' + this.$store.state.status);\r\n            alert('修改后state status---:' + this.$store.state.status);\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n    .x-color{\r\n        color: #409eff;\r\n    }\r\n    .color-red{\r\n        color: red;\r\n    }\r\n</style>\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// src/page/view-6/index.vue"],"sourceRoot":""}