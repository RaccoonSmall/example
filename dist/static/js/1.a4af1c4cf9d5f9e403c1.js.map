{"version":3,"sources":["webpack:///./src/page/view-7/index.vue?3f29","webpack:///./src/page/view-7/index.vue","webpack:///src/page/view-7/index.vue"],"names":["esExports","render","_vm","this","_h","$createElement","_c","_self","_m","_v","staticClass","on","click","actionDispatch","staticRenderFns","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_8cd41f3c_hasScoped_true_transformToRequire_video_src_poster_source_src_img_src_image_xlink_href_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_index_vue__","__webpack_require__","__vue_styles__","ssrContext","Component","normalizeComponent","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_index_vue___default","a","data","methods","$store","dispatch"],"mappings":"2EAAA,IAEAA,GAAiBC,OAFjB,WAA0B,IAAAC,EAAAC,KAAaC,EAAAF,EAAAG,eAA0BC,EAAAJ,EAAAK,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,QAAAJ,EAAAM,GAAA,GAAAN,EAAAO,GAAA,KAAAH,EAAA,OAAAA,EAAA,KAAAJ,EAAAO,GAAA,4BAAAP,EAAAO,GAAA,KAAAH,EAAA,OAAmHI,YAAA,qBAA+BR,EAAAO,GAAA,gGAAAP,EAAAO,GAAA,KAAAH,EAAA,KAAAJ,EAAAO,GAAA,+NAAqTP,EAAAO,GAAA,KAAAH,EAAA,UAAuEI,YAAA,QAAAC,IAAwBC,MAAAV,EAAAW,kBAA4BX,EAAAO,GAAA,gDAAAH,EAAA,WAE1oBQ,iBADjB,WAAoC,IAAAZ,EAAAC,KAAaC,EAAAF,EAAAG,eAA0BC,EAAAJ,EAAAK,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAAA,EAAA,KAAyBI,YAAA,yBAAmCR,EAAAO,GAAA,kBAAAP,EAAAO,GAAA,KAAAH,EAAA,OAAiDI,YAAA,qBAA+BR,EAAAO,GAAA,wDAAAH,EAAA,KAAyEI,YAAA,cAAwBR,EAAAO,GAAA,sCAAAP,EAAAO,GAAA,KAAAH,EAAA,KAAmEI,YAAA,cAAwBR,EAAAO,GAAA,oEAAAP,EAAAO,GAAA,KAAAH,EAAA,UAAAJ,EAAAO,GAAA,0DAAAP,EAAAO,GAAA,KAAAH,EAAA,OAAAJ,EAAAO,GAAA,gBAAAH,EAAA,OAAAJ,EAAAO,GAAA,6IAAAP,EAAAO,GAAA,kBAAAH,EAAA,QAAAJ,EAAAO,GAAA,04BAAoxCP,EAAAO,GAAA,qBAE/rDM,EAAA,gMCHA,IAAAC,EAAAC,EAAA,QAGA,IASAC,EAZA,SAAAC,GACAF,EAAA,SAgBAG,EAdAH,EAAA,OAcAI,CACAC,EAAAC,EACAP,EAAA,GATA,EAWAE,EAPA,kBAEA,MAUAH,EAAA,QAAAK,EAAA,uGC2BAI,KADA,WAEA,UAGAC,SACAZ,eADA,WAEAV,KAAAuB,OAAAC,SAAA","file":"static/js/1.a4af1c4cf9d5f9e403c1.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('main',[_vm._m(0),_vm._v(\" \"),_c('div',[_c('p',[_vm._v(\"Store Action 异步操作实例用应用\")]),_vm._v(\" \"),_c('div',{staticClass:\"x-font-container\"},[_vm._v(\"在程序应用中，避免不了异步的接口的调用处理。当组件之间的状态需要改变其形态时，需要做网络请求时来执行对状态更改，此时我们在Action 中执行异步请求，提交Mutation的处理。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"  this.$store.dispatch() 返回的时Promise对象，因此我门就可以明确异步请求什么时候结束了以及是否抛出异常。如何你对Promise 还不熟悉，那么示例对于你来说就”黯然失色“，建议先去熟悉Promise 的概念以及使用。当然在某些情况，异步操作我们可以直接在Vue Methods 中处理，然后store.commit(); 更加好的方式在对于组件状态更改时，必须在Action 中做分发提交对状态的更改。\")]),_vm._v(\" \"),_c('strong',{staticClass:\"x-btn\",on:{\"click\":_vm.actionDispatch}},[_vm._v(\"触发Action 使用this.$store.dispatch('actionB')\")]),_c('br')])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('p',{staticClass:\"title-tip margin-t-0\"},[_vm._v(\"使用进阶--Action\")]),_vm._v(\" \"),_c('div',{staticClass:\"x-font-container\"},[_vm._v(\"Action 类似与Mutation。 但是需要注意的是，不同于有以下两点：\\n            \"),_c('p',{staticClass:\"color-red\"},[_vm._v(\"1、Mutation 是同步操作,而Action是处理异步的操作\")]),_vm._v(\" \"),_c('p',{staticClass:\"color-red\"},[_vm._v(\"2、Mutation 是变更Store State状态，而Action 是用来显式的提交Mutation--commit()\")]),_vm._v(\" \"),_c('strong',[_vm._v(\"不同于mutations，触发actions，使用this.$store.dispatch() 方法\")])]),_vm._v(\" \"),_c('pre',[_vm._v(\"            \"),_c('div',[_vm._v(\"action 接收一个具有Store 对象相同的context 对象。因此我们可以通过context.commit() 显式的提交Mutation. 或者获取Store State、Getter：【context.state】对象，【context.getters】对象\")]),_vm._v(\"\\n            \"),_c('code',[_vm._v(\"\\n                const store = new vuex.Store({\\n                    state:{\\n                        status:'0',\\n                    },\\n                    getters:{\\n                        userName(state,getter){\\n                            return '小明'\\n                        }\\n                    },\\n                    mutations:{\\n                        setStatus(state,data) {\\n                            state.status = '1';\\n                        },\\n                    },\\n                    // Action 作用：显式的提交Mutation,异步逻辑的操作\\n                    actions:{\\n                        insertUser(context) {\\n                            let status = context.state.status;\\n                            let name = context.getters.userName;\\n                            context.commit('setStatus');\\n                        }\\n                    }\\n                });\\n            \")]),_vm._v(\"\\n        \")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-8cd41f3c\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/page/view-7/index.vue\n// module id = Fprs\n// module chunks = 1","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-8cd41f3c\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./index.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-8cd41f3c\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-8cd41f3c\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/page/view-7/index.vue\n// module id = T6y6\n// module chunks = 1","<template>\r\n    <main>\r\n        <div>\r\n            <p class=\"title-tip margin-t-0\">使用进阶--Action</p>\r\n            <div class=\"x-font-container\">Action 类似与Mutation。 但是需要注意的是，不同于有以下两点：\r\n                <p class=\"color-red\">1、Mutation 是同步操作,而Action是处理异步的操作</p>\r\n                <p class=\"color-red\">2、Mutation 是变更Store State状态，而Action 是用来显式的提交Mutation--commit()</p>\r\n                <strong>不同于mutations，触发actions，使用this.$store.dispatch() 方法</strong>\r\n            </div>\r\n            <pre>\r\n                <div>action 接收一个具有Store 对象相同的context 对象。因此我们可以通过context.commit() 显式的提交Mutation. 或者获取Store State、Getter：【context.state】对象，【context.getters】对象</div>\r\n                <code>\r\n                    const store = new vuex.Store({\r\n                        state:{\r\n                            status:'0',\r\n                        },\r\n                        getters:{\r\n                            userName(state,getter){\r\n                                return '小明'\r\n                            }\r\n                        },\r\n                        mutations:{\r\n                            setStatus(state,data) {\r\n                                state.status = '1';\r\n                            },\r\n                        },\r\n                        // Action 作用：显式的提交Mutation,异步逻辑的操作\r\n                        actions:{\r\n                            insertUser(context) {\r\n                                let status = context.state.status;\r\n                                let name = context.getters.userName;\r\n                                context.commit('setStatus');\r\n                            }\r\n                        }\r\n                    });\r\n                </code>\r\n            </pre>\r\n\r\n        </div>\r\n\r\n\r\n        <div>\r\n            <p>Store Action 异步操作实例用应用</p>\r\n            <div class=\"x-font-container\">在程序应用中，避免不了异步的接口的调用处理。当组件之间的状态需要改变其形态时，需要做网络请求时来执行对状态更改，此时我们在Action 中执行异步请求，提交Mutation的处理。</div>\r\n            <p>&emsp;&emsp;this.$store.dispatch() 返回的时Promise对象，因此我门就可以明确异步请求什么时候结束了以及是否抛出异常。如何你对Promise 还不熟悉，那么示例对于你来说就”黯然失色“，建议先去熟悉Promise 的概念以及使用。当然在某些情况，异步操作我们可以直接在Vue Methods 中处理，然后store.commit(); 更加好的方式在对于组件状态更改时，必须在Action 中做分发提交对状态的更改。</p>\r\n            \r\n             <strong class=\"x-btn\" @click=\"actionDispatch\">触发Action 使用this.$store.dispatch('actionB')</strong><br/>\r\n        </div>\r\n    </main>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    data() {\r\n        return{\r\n        }\r\n    },\r\n    methods:{\r\n        actionDispatch() {\r\n            this.$store.dispatch('actionB');\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n    .color-red{\r\n        color: red;\r\n    }\r\n</style>\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// src/page/view-7/index.vue"],"sourceRoot":""}