webpackJsonp([2],{"06/g":function(t,s){},SJYT:function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var a=e("sisv"),n=e.n(a);for(var o in a)"default"!==o&&function(t){e.d(s,t,function(){return a[t]})}(o);var i=e("osh6");var u=function(t){e("06/g")},r=e("VU/8")(n.a,i.a,!1,u,"data-v-4eaa74aa",null);s.default=r.exports},osh6:function(t,s,e){"use strict";var a={render:function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("main",[e("p",{staticClass:"title-tip margin-t-0"},[t._v("使用进阶--mutation")]),t._v(" "),t._m(0),t._v(" "),e("div",{staticClass:"x-font-container"},[t._v("上面收说到vuex 的状态管理，当我们要对状态进行更改的时候该如何做呢？ 这时就用到了Store mutation了~ 在Vuex中唯一能改变Store state 的就是显式的提交，调用commit()方法。Vuex 给她定了个名字叫做Mutation~")]),t._v(" "),e("p",{staticClass:"color-red"},[t._v("Vuex Store 状态也是响应式了，因此当我们Commit 提交对Store State 状态的值更改，组件之间的住状态也会随之改变，也正是体现了Vue 技术体系中的高效和便捷了~")]),t._v(" "),t._m(1),t._v(" "),e("p",{staticClass:"x-btn",on:{click:function(s){t.storeCommit()}}},[t._v("修改Store State 状态值：this.$store.commmit('setStatus');")]),t._v(" "),e("div",[e("p",{staticClass:"title-tip"},[t._v("使用常量代替Mutation 事件类型")]),t._v(" "),e("div",{staticClass:"x-font-container"},[t._v("对于较大或者应用状态管理应用较多程序应用，使用常用代替事件类型，对于代码结构上会更加清晰，一目了然。相信谁都愿意去写代码结构清晰，代码质量精简的代码~")]),t._v(" "),t._m(2),t._v(" "),e("p",{staticClass:"x-btn",on:{click:function(s){t.commit_()}}},[t._v("全局常量触发mutations事件类型：this.$store.commmit(mutation.APP);")])])])},staticRenderFns:[function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"x-font-container"},[this._v("一个重要的概念，mutation。 Vuex 主要功能是提供应用程序之间的状态管理，如何进行状态呢？\n            "),s("br"),this._v("  知道vue是以数据驱动视图，而我们Vuex 就是需要定义具有语义化的数据来管理我们应用组件之间的状态，这个具有语义化的数据我们定义在Store state中，既State 称呼抽象可以理解为状态管理。当我们需要为一些组件做一个不同逻辑操作时，就需要用到state了，根据state 里面的数据做一些实际逻辑的处理~\n        ")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[this._v("            定义一个mutation,在Store 中定义mutations对象。\n            改变state 中的状态值：this.$store.commit('setAddress');\n            Store mutations 中接收X个参数：\n            "),s("span",{staticClass:"x-color"},[this._v("1、接收 state 作为第一个参数，可访问stotre state 状态值")]),this._v("\n            "),s("span",{staticClass:"x-color"},[this._v("2、mutation 接收可以接收第二个附件参数data，commit('mutations funtionName',data).")]),this._v("\n            "),s("code",[this._v("\n                const store = new vuex.Store({\n                    state:{\n                        status:'0',\n                    },\n                    mutations:{\n                        setStatus(state,data) {\n                            state.status = '1';\n                        }\n                    }\n                });\n            ")]),this._v("\n        ")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[this._v("                使用：\n            "),s("code",[this._v("\n                mutation.js:\n                const APP = '0';\n                export default {\n                    APP,\n                }\n\n                \n                import mutation from '@/store/mutation'\n                const store = new vuex.Store({\n                    state:{\n                        status:'0',\n                    },\n                    mutations:{\n                        //使用常量代替Mutation 事件类型\n                        [mutation.APP](state,data) {\n                            state.status = '1';\n                        }\n                    }\n                });\n            ")]),this._v("\n            ")])}]};s.a=a},sisv:function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var a,n=e("m9kF");(a=n)&&a.__esModule;s.default={methods:{storeCommit:function(){alert("修改前state status---:"+this.$store.state.status),console.log("修改前state status---:"+this.$store.state.status),this.$store.commit("setStatus"),console.log("修改后state status---:"+this.$store.state.status),alert("修改后state status---:"+this.$store.state.status)},commit_:function(){alert("修改前state status---:"+this.$store.state.status),console.log("修改前state status---:"+this.$store.state.status),this.$store.commit("app"),console.log("修改后state status---:"+this.$store.state.status),alert("修改后state status---:"+this.$store.state.status)}}}}});
//# sourceMappingURL=2.76c1dae93f0f05296634.js.map