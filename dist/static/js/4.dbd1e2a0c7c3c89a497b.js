webpackJsonp([4],{"3Smj":function(t,e){},d85F:function(t,e,n){t.exports=n.p+"static/img/store.dd60980.png"},hbBb:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("main",[s("p",{staticClass:"title-tip margin-t-0"},[t._v("Vuex--Store 项目结构的搭建")]),t._v(" "),s("div",{staticClass:"x-font-container"},[t._v("使用Vuex 并不强制性的要求该如何定义Store 或者如何使用Module,正因此灵活性而显得比较好。但是谁都愿意去看结构清晰、代码分层明了已维护的代码~  当然如果对一小型的项目甚至可以不使用到Vuex时则不用考虑。大型的项目就有必要做一些规范性布局了：")]),t._v(" "),s("pre",[t._v("        "),s("div",[t._v("按照官方的标准目录结构的组织，本实例都请按照如下标准构建：")]),t._v("\n        "),s("code",[t._v("\n            └── store\n                ├── index.js          # 我们组装模块并导出 store 的地方\n                ├── actions.js        # 根级别的 action\n                ├── mutations.js      # 根级别的 mutation\n                ├── getters.js        # 根级别的 getters\n                └── modules\n                    ├── cart.js       # 购物车模块\n                    └── products.js   # 产品模块\n        ")]),t._v("\n    ")]),t._v(" "),s("strong",[t._v("项目截图示例：")]),t._v(" "),s("div",[s("img",{attrs:{src:n("d85F")}})])])}]};var r=n("VU/8")(null,s,!1,function(t){n("3Smj")},"data-v-1ca3b98c",null);e.default=r.exports}});
//# sourceMappingURL=4.dbd1e2a0c7c3c89a497b.js.map